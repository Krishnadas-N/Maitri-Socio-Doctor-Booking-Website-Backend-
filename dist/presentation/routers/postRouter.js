"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const mongodbPostDataSource_1 = require("../../data/data-sources/mongodb/mongodbPostDataSource");
const postRepository_1 = require("../../domain/repositories/postRepository");
const postUsecase_1 = require("../../domain/use-cases/postUsecase");
const postController_1 = require("../controllers/postController");
const uploadMiddleWare_1 = require("../../config/uploadMiddleWare");
const authRouterSetup_1 = require("./authRouterSetup");
const roleBasedAuthMiddleware_1 = require("../../middlewares/roleBasedAuthMiddleware");
const postRouter = (0, express_1.Router)();
const PostDataSource = new mongodbPostDataSource_1.MongoDbPostDataSource();
const postRepo = new postRepository_1.PostRepository(PostDataSource);
const postUsecase = new postUsecase_1.PostUsecase(postRepo);
const postController = new postController_1.PostController(postUsecase);
postRouter.post('/', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), uploadMiddleWare_1.upload.array('media', 5), uploadMiddleWare_1.uploadToCloudinary, postController.createPost.bind(postController));
postRouter.get('/', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['Doctor', 'User'], 'READ'), postController.getAllPosts.bind(postController));
postRouter.delete('/p/:postId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['Doctor'], 'WRITE'), postController.deleteDoctorPost.bind(postController));
postRouter.post('/:postId/like', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), postController.likePost.bind(postController));
postRouter.put('/edit/:postId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['Doctor'], 'WRITE'), postController.editPost.bind(postController));
postRouter.post('/:postId/comment', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), postController.commentOnPost.bind(postController));
postRouter.post('/:postId/comment/reply', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), postController.replyToComment.bind(postController));
postRouter.post('/:postId/report', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), postController.reportPost.bind(postController));
postRouter.post('/block', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), postController.blockPost.bind(postController));
postRouter.post('/archive', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), postController.archivePost.bind(postController));
postRouter.get('/p/:postId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), postController.getPostDetails.bind(postController));
postRouter.get('/tag/:tag', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), postController.explorePostsByTag.bind(postController));
postRouter.put('/comment/edit', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), postController.editComment.bind(postController));
postRouter.delete('/comment/delete', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), postController.deleteComment.bind(postController));
postRouter.put('/comment/reply/edit', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), postController.editReply.bind(postController));
postRouter.delete('/comment/reply/delete', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), postController.deleteReply.bind(postController));
postRouter.get('/get-doctor-posts', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['Doctor'], 'READ'), postController.getDoctorPosts.bind(postController));
exports.default = postRouter;
