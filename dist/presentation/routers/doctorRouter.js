"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.doctorRouter = void 0;
const express_1 = require("express");
const mongodbDoctorDataSource_1 = require("../../data/data-sources/mongodb/mongodbDoctorDataSource");
const doctorRepository_1 = require("../../domain/repositories/doctorRepository");
const mongodbOtpDataSource_1 = require("../../data/data-sources/mongodb/mongodbOtpDataSource");
const otpRepository_1 = require("../../domain/repositories/otpRepository");
const doctorController_1 = require("../controllers/doctorController");
const uploadMiddleWare_1 = require("../../config/uploadMiddleWare");
const doctorUsecase_1 = require("../../domain/use-cases/doctorUsecase");
const authRouterSetup_1 = require("./authRouterSetup");
const roleBasedAuthMiddleware_1 = require("../../middlewares/roleBasedAuthMiddleware");
const mongodbConsultationDataSource_1 = require("../../data/data-sources/mongodb/mongodbConsultationDataSource");
const consultationRepository_1 = require("../../domain/repositories/consultationRepository");
const consultationUsecase_1 = require("../../domain/use-cases/consultationUsecase");
const consultationController_1 = require("../controllers/consultationController");
const mongodbWalletDataSource_1 = require("../../data/data-sources/mongodb/mongodbWalletDataSource");
exports.doctorRouter = (0, express_1.Router)();
const doctorDataSource = new mongodbDoctorDataSource_1.MongoDbDoctorDataSourceImpl();
const doctorRepo = new doctorRepository_1.IDoctorRepositoryImpl(doctorDataSource);
const otpRepositoryImpl = new otpRepository_1.OTPRepsositoryImpl(new mongodbOtpDataSource_1.MongoDbOtpDataSource());
const doctorServices = new doctorUsecase_1.DoctorUseCaseImpl(doctorRepo, otpRepositoryImpl);
const ConsultaionDataSource = new mongodbConsultationDataSource_1.ConsultaionModel(new mongodbWalletDataSource_1.WalletDataSource());
const consultationRepo = new consultationRepository_1.ConsultationRepoImpl(ConsultaionDataSource);
const consultationUsecase = new consultationUsecase_1.ConsultationUseCaseImpl(consultationRepo);
const consultationController = new consultationController_1.ConsultationController(consultationUsecase);
exports.doctorRouter.post('/register/basic-info', (0, doctorController_1.registerBasicInfo)(doctorServices));
exports.doctorRouter.post('/login', (0, doctorController_1.login)(doctorServices));
exports.doctorRouter.post('/complete-professional-info', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), uploadMiddleWare_1.upload.array('certifications', 5), uploadMiddleWare_1.uploadToCloudinary, (0, doctorController_1.registerProfessionalInfo)(doctorServices));
exports.doctorRouter.post('/complete-additional-info', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, doctorController_1.registerAdditionalInfo)(doctorServices));
exports.doctorRouter.post('/forgot-password', (0, doctorController_1.forgotPassword)(doctorServices));
exports.doctorRouter.post('/reset-password/:token', (0, doctorController_1.resetPassword)(doctorServices));
exports.doctorRouter.get('/get-doctor/:doctorId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['Admin', 'User'], 'READ'), (0, doctorController_1.getDoctorById)(doctorServices));
exports.doctorRouter.patch('/verify-profile/:doctorId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['Admin'], 'WRITE'), (0, doctorController_1.VerifyProfile)(doctorServices));
exports.doctorRouter.get('/get-doctors', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User', 'Admin', "Doctor"], 'READ'), (0, doctorController_1.getDoctors)(doctorServices));
exports.doctorRouter.put('/change-status/:doctorId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['Admin'], 'WRITE'), (0, doctorController_1.chnageStatus)(doctorServices));
exports.doctorRouter.get('/get-currentDocotor', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['Doctor'], 'READ'), (0, doctorController_1.getCurrentDoctor)(doctorServices));
exports.doctorRouter.patch('/change-profile-pic', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['Doctor'], 'READ'), uploadMiddleWare_1.upload.single('profilePic'), uploadMiddleWare_1.uploadToCloudinary, (0, doctorController_1.updateDoctorProfilePic)(doctorServices));
exports.doctorRouter.post('/save-slots', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['Doctor'], 'WRITE'), (0, doctorController_1.saveSelectedSlots)(doctorServices));
exports.doctorRouter.get('/get-doctor-appoinments', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['Doctor'], 'READ'), consultationController.getDoctorAppoinments.bind(consultationController));
exports.doctorRouter.put('/change-appoinmentStatus/:appointmentId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['Doctor'], 'READ'), consultationController.changeAppoinmentStatusByDoctor.bind(consultationController));
// doctorRouter.get('/get-booked-slots',authMiddleWare.isAuthenticated.bind(authMiddleWare),checkRolesAndPermissions(['Doctor'], 'READ'),getBookedSlots(doctorServices));
exports.default = exports.doctorRouter;
