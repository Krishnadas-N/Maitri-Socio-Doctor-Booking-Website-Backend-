"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.userRouter = void 0;
const mongodbOtpDataSource_1 = require("../../data/data-sources/mongodb/mongodbOtpDataSource");
const mongodbUserDataSource_1 = require("../../data/data-sources/mongodb/mongodbUserDataSource");
const otpRepository_1 = require("../../domain/repositories/otpRepository");
const userRepository_1 = require("../../domain/repositories/userRepository");
const userUsecase_1 = require("../../domain/use-cases/userUsecase");
const requestValidation_1 = require("../../middlewares/requestValidation");
const userController_1 = require("../controllers/userController");
const express_1 = require("express");
const authRouterSetup_1 = require("./authRouterSetup");
const roleBasedAuthMiddleware_1 = require("../../middlewares/roleBasedAuthMiddleware");
const interestedDoctorsRepository_1 = require("../../domain/repositories/interestedDoctorsRepository");
const mongodbInterestedDataSource_1 = require("../../data/data-sources/mongodb/mongodbInterestedDataSource");
const InterestedDoctorsUsecase_1 = require("../../domain/use-cases/InterestedDoctorsUsecase");
const DoctorInterestsController_1 = require("../controllers/DoctorInterestsController");
const uploadMiddleWare_1 = require("../../config/uploadMiddleWare");
const mongodbConsultationDataSource_1 = require("../../data/data-sources/mongodb/mongodbConsultationDataSource");
const consultationRepository_1 = require("../../domain/repositories/consultationRepository");
const consultationUsecase_1 = require("../../domain/use-cases/consultationUsecase");
const consultationController_1 = require("../controllers/consultationController");
const mongodbWalletDataSource_1 = require("../../data/data-sources/mongodb/mongodbWalletDataSource");
const walletRepository_1 = require("../../domain/repositories/walletRepository");
const walletUsecase_1 = require("../../domain/use-cases/walletUsecase");
const walletController_1 = require("../controllers/walletController");
exports.userRouter = (0, express_1.Router)();
const userRepositoryImpl = new userRepository_1.UserRepository(new mongodbUserDataSource_1.MongoDbUserDataSource());
const otpRepsositoryImpl = new otpRepository_1.OTPRepsositoryImpl(new mongodbOtpDataSource_1.MongoDbOtpDataSource());
const userService = new userUsecase_1.UserUseCase(userRepositoryImpl, otpRepsositoryImpl);
const userController = new userController_1.UserController(userService);
const interestsDoctorsDataSource = new mongodbInterestedDataSource_1.InterestedDoctorsDataSource();
const IntersetedDoctorsRepo = new interestedDoctorsRepository_1.InterestedDoctorsRepoImpl(interestsDoctorsDataSource);
const InterestedDoctorsUseCase = new InterestedDoctorsUsecase_1.InterestedDoctors(IntersetedDoctorsRepo);
const consultaionDataSource = new mongodbConsultationDataSource_1.ConsultaionModel(new mongodbWalletDataSource_1.WalletDataSource());
const consultationRepo = new consultationRepository_1.ConsultationRepoImpl(consultaionDataSource);
const consultationUsecase = new consultationUsecase_1.ConsultationUseCaseImpl(consultationRepo);
const consultationController = new consultationController_1.ConsultationController(consultationUsecase);
const walletRepo = new walletRepository_1.WalletRepository(new mongodbWalletDataSource_1.WalletDataSource());
const walletUsecase = new walletUsecase_1.walletUseCase(walletRepo);
const walletController = new walletController_1.WalletController(walletUsecase);
exports.userRouter.post('/login', requestValidation_1.loginValidateUser, userController.loginUser.bind(userController));
exports.userRouter.post('/register', requestValidation_1.SignupValidateUser, userController.signupUser.bind(userController));
exports.userRouter.get('/profile', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), userController.getUserProfile.bind(userController));
exports.userRouter.post('/forgot-password', userController.forgotPassword.bind(userController));
exports.userRouter.post('/reset-password/:token', userController.resetPassword.bind(userController));
exports.userRouter.get('/get-Users', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['Admin', 'User'], 'READ'), userController.getAllUsers.bind(userController));
exports.userRouter.patch('/change-status/:userId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['Admin'], 'READ'), userController.BlockOrUnBlokUser.bind(userController));
exports.userRouter.get('/get-byId/:userId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User', 'Doctor', 'Admin'], 'READ'), userController.getUserById.bind(userController));
exports.userRouter.put('/edit-profile', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), userController.editUserProfile.bind(userController));
exports.userRouter.post('/addToInterest/:doctorId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), (0, DoctorInterestsController_1.addToInterest)(InterestedDoctorsUseCase));
exports.userRouter.delete('/removeInterest/:doctorId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), (0, DoctorInterestsController_1.removeInterest)(InterestedDoctorsUseCase));
exports.userRouter.get('/get-doctor-interests', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), (0, DoctorInterestsController_1.getInterests)(InterestedDoctorsUseCase));
exports.userRouter.patch('/change-profilePic', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), uploadMiddleWare_1.upload.single('profilePic'), uploadMiddleWare_1.uploadToCloudinary, userController.ChangeUserProfile.bind(userController));
exports.userRouter.get('/change-password', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), userController.changePassword.bind(userController));
exports.userRouter.post('/make-appointment/:doctorId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), consultationController.makeAnAppoinment.bind(consultationController));
exports.userRouter.get('/get-appoinment/:appoinmentId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), consultationController.getAppoinmentDetails.bind(consultationController));
exports.userRouter.post('/make-payment/:appoinmentId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), consultationController.createPayment.bind(consultationController));
exports.userRouter.post('/verify-payment/:appointmentId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), consultationController.verifyWebhook.bind(consultationController));
exports.userRouter.get('/get-appoinments', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), consultationController.getUserAppoinments.bind(consultationController));
exports.userRouter.put('/change-appoinment-status/:appointmentId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), consultationController.changeAppoinmentStatusByUser.bind(consultationController));
exports.userRouter.get('/get-booked-slots/:doctorId', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), consultationController.getDoctorAvailableSlots.bind(consultationController));
exports.userRouter.get('/get-doctors', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), consultationController.getDoctors.bind(consultationController));
exports.userRouter.get('/get-wallet', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), walletController.getUserWallet.bind(walletController));
exports.userRouter.post('/medical-records', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), uploadMiddleWare_1.upload.single('file'), uploadMiddleWare_1.uploadToCloudinary, userController.addUserMedicalRecord.bind(userController));
exports.userRouter.get('/medical-records', authRouterSetup_1.authMiddleWare.isAuthenticated.bind(authRouterSetup_1.authMiddleWare), (0, roleBasedAuthMiddleware_1.checkRolesAndPermissions)(['User'], 'READ'), userController.getUserMedicalRecords.bind(userController));
exports.default = exports.userRouter;
